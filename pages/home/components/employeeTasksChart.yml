id: '17161839478200.004521432801752434'
definitionId: chart
parentSlotId: '2'
styles:
  xl:
    gridItem:
      x: 0
      y: 111
      w: 12
      h: 112
    flex:
      size:
        widthValue: 300
        widthUnit: px
        heightValue: 320
        heightUnit: px
      grow: '0'
      shrink: '0'
  xs:
    gridItem:
      x: 0
      y: 194
      w: 24
      h: 69
    flex:
      size:
        widthValue: 300
        widthUnit: px
        heightValue: 320
        heightUnit: px
      grow: '0'
      shrink: '0'
properties:
  dataset: '{{actions.fetchTasks.data}}'
  config: |-
    const getAssignedTasks = (tasks) => {
      const employeeTaskCount = {};

      for (const task of tasks) {
        for (const employee of task.assigned_employees) {
          const employeeId = employee.employee_id;
          employeeTaskCount[employeeId] = { value: (employeeTaskCount[employeeId]?.value || 0) + 1, name: employee.employee_name };
        }
      }

      return Object.values(employeeTaskCount).map((val) => val);
    };

    return {
      color: ['#2a5aee'],
      xAxis: {
        type: 'category',
        data: getAssignedTasks({{actions.fetchTasks.data}}).map((entry) => entry.name),
        axisLabel: {
          show: false,
        },
        axisTick: {
          show: false,
        },
      },
      tooltip: {
        show: true,
      },
      yAxis: {
        type: 'value',
      },
      series: [
        {
          data: getAssignedTasks({{state.tasks}}),
          type: 'bar',
        },
      ],
    };
  name: employeeTasksChart
  __UIBAKERY__RESPONSIVE__SHOW__CONDITION__CODE__:
    - xl
    - xs
  title: ''
  type: barChart
  structure:
    - title: Series
      data: []
      color: primary
      xProp: name
      yProp: value
      ignoreTimezone: false
      __UIBAKERY__SYSTEM_ID__: '17161921709120.5673206370767003'
      groupType: value
      groupFunctionType: show_last
  showLoading:
    value: false
    dataValue: '{{actions.fetchTasks.loading}}'
    withData: true
  useJsConfig: echarts
  barsRounderdCorners: false
  containerStyles:
    withData: false
    dataValue: |-
      {
        padding: 'default',
        shadow: 'default',
        border: 'default'
      }
    value:
      padding: default
      shadow: default
      border: default
actions: {}
slots: []
